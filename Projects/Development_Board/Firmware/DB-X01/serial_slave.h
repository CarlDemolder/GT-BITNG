#ifndef __SERIAL_SLAVE_H__
#define __SERIAL_SLAVE_H__

#include "common.h"
#include "ft201x.h"
#include "tmp117.h"                   
#include "bmi160.h"
#include "max30003.h"
#include "clocks.h"
#include "power.h"  

enum SERIAL_SLAVE_COMMAND_CONSTANTS
{
    USB_COMMAND_HEADER = 0XAA,
    USB_COMMAND_FOOTER = 0XAB,
    USB_LOG_HEADER = 0XAC,
    USB_LOG_FOOTER = 0XAD
};

enum MODULE_COMMAND_CONSTANTS
{
    NRF52_MODULE = 0X01,
    TMP117_MODULE = 0X02,
    BMI160_MODULE = 0X03,
    MAX30003_MODULE = 0X04,
    FT201X_MODULE = 0X05,
    BLE_MODULE = 0x06
};

enum NRF52_COMMAND_CONSTANTS
{
    NRF52_HF_CLOCK_COMMAND = 0x01,
    NRF52_LF_CLOCK_COMMAND = 0x02,
    NRF52_CLOCK_COMMAND = 0X03,
    NRF52_RTC_CLOCK_COMMAND = 0X04,
    NRF52_POWER_COMMAND = 0X05,
    NRF52_COMMON_COMMAND = 0X06,
    NRF52_I2C_COMMAND = 0X07,
    NRF52_SPI_COMMAND = 0X08
};

enum FT201X_COMMAND_CONSTANTS
{
    FT201X_READ_CHIP_ID_COMMAND = 0X01,
    FT201X_SET_VCP_COMMAND = 0X02,
    FT201X_WRITE_EEPROM_COMMAND = 0X03,
    FT201X_READ_EEPROM_COMMAND = 0X04,
    FT201X_WRITE_DATA_COMMAND = 0X05,
    FT201X_READ_DATA_COMMAND = 0X06
};

enum BMI160_COMMAND_CONSTANTS
{
    BMI160_READ_CHIP_ID_COMMAND = 0X01,
    BMI160_INIT_COMMAND = 0X02,
    BMI160_READ_ACCEL_GYRO_COMMAND = 0X03
};

enum TMP117_COMMAND_CONSTANTS
{
    TMP117_READ_CHIP_ID_COMMAND = 0X01,
    TMP117_INIT_COMMAND = 0X02,
    TMP117_SET_OPERATING_MODE_COMMAND = 0X03,
    TMP117_TEMP_UINT16_COMMAND = 0X04,
    TMP117_TEMP_CHAR_ARRAY_COMMAND = 0X05,
    TMP117_READ_REVISION_NUMBER_COMMAND = 0X06,
    TMP117_UNLOCK_EEPROM_COMMAND = 0X07,
    TMP117_GENERAL_CALL_RESET_COMMAND = 0X08
};

enum MAX30003_COMMAND_CONSTANTS
{
    MAX30003_READ_CHIP_ID_COMMAND = 0X01,
    MAX30003_INIT_COMMAND = 0X02,
    MAX30003_SOFT_RESET_COMMAND = 0X03,
    MAX30003_INTERRUPT_ENABLE_COMMAND = 0X04
};

enum NRF52_BLE_COMMAND_CONSTANTS
{
    BLE_INIT_GAP_PARAMS_COMMAND = 0X01,
    BLE_UPDATE_GAP_PARAMS_COMMAND = 0X02,
    BLE_INIT_GATT_COMMAND = 0X03,
    BLE_INIT_SERVICES_COMMAND = 0X04,
    BLE_INIT_CONN_PARAMS_COMMAND = 0X05,
    BLE_INIT_BLE_STACK_COMMAND = 0X06,
    BLE_INIT_PEER_MANAGER_COMMAND = 0X07,
    BLE_INIT_ADVERTISING_COMMAND = 0X08
};

enum NRF52_CLOCK_COMMAND_CONSTANTS
{
    NRF52_HF_CLOCK_START = 0X01,
    NRF52_HF_CLOCK_STOP = 0X02,
    NRF52_NRFX_CLOCK_DRIVER_INIT = 0X03,
    NRF52_NRFX_CLOCK_DRIVER_UNINIT = 0X04,
    NRF52_LF_CLOCK_START = 0X05,
    NRF52_LF_CLOCK_STOP = 0X06
};

enum NRF52_RTC_COMMAND_CONSTANTS
{
    NRF52_RTC_FT201X_INIT = 0X01,
    NRF52_RTC_FT201X_SET_COUNTER = 0X02,
    NRF52_RTC_FT201X_START = 0X03,
    NRF52_RTC_FT201X_STOP = 0X04,
    NRF52_RTC_FT201X_RESTART = 0X05,
    NRF52_RTC_FT201X_UNINIT = 0X06,
    NRF52_RTC_TMP117_INIT = 0X07,
    NRF52_RTC_TMP117_SET_COUNTER = 0X08,
    NRF52_RTC_TMP117_START = 0X09,
    NRF52_RTC_TMP117_STOP = 0X10,
    NRF52_RTC_TMP117_RESTART = 0X11,
    NRF52_RTC_TMP117_UNINIT = 0X12
};

enum NRF52_POWER_COMMAND_CONSTANTS
{
    NRF52_POWER_DCDC_CONVERTER_ENABLE = 0X01,
    NRF52_POWER_DCDC_CONVERTER_DISABLE = 0X02,
    NRF52_POWER_SLEEP_MODE_ENTER = 0X03,
    NRF52_POWER_DEEP_SLEEP_MODE_ENTER = 0X04,
    NRF52_POWER_MANAGER_HANDLER = 0X05,
    NRF52_POWER_MANAGER_INIT = 0X06
};

enum NRF52_LED_COMMAND_CONSTANTS
{
    NRF52_LED_INIT = 0X10,
    NRF52_LED_IND_LED_ON = 0X11,
    NRF52_LED_IND_LED_OFF = 0X12,
    NRF52_LED_IND_BLINK = 0X13,
    NRF52_LED_BLE_LED_ON = 0X14,
    NRF52_LED_BLE_LED_OFF = 0X15,
    NRF52_LED_BLE_BLINK = 0X16
};

enum NRF52_COMMON_COMMANDS_CONSTANTS
{
    NRF52_I2C_TWIM_INIT = 0X01,
    NRF52_I2C_TWIM_UNINIT = 0X02,
    NRF52_I2C_TWIM_START = 0X03,
    NRF52_I2C_TWIM_STOP = 0x04,
    NRF52_LOG_INIT = 0X05,
    NRF52_GPIOTE_INIT = 0X06,
    NRF52_LDO_INIT = 0X07,
    NRF52_VCC_LDO_EN = 0X08,
    NRF52_INPUT_OUTPUT_INIT = 0x09
};

enum NRF52_SPI_COMMANDS_CONSTANTS
{
    NRF52_SPI_SPIM_INIT = 0X01,
    NRF52_SPI_SPIM_ENABLE = 0X02,
    NRF52_SPI_SPIM_DISABLE = 0X03,
    NRF52_SPI_SPIM_UNINIT = 0X04
};

enum NRF52_LED_COMMANDS_CONSTANTS
{
    NRF52_LED_IND_CUSTOM_BLINK = 0X01,
    NRF52_LED_IND_SHORT_BLINK = 0X02,
    NRF52_LED_IND_MEDIUM_BLINK = 0X03,
    NRF52_LED_IND_LONG_BLINK = 0X04
};

void enable_serial_slave_handler(void);
void serial_slave_manager_handler(void);
void bluetooth_manager_handler(void);

void _nrf52_handler(uint8_t *serial_array_data);
static void _ft201x_handler(uint8_t *serial_array_data);
static void _bmi160_handler(uint8_t *serial_array_data);
static void _tmp117_handler(uint8_t *serial_array_data);
static void _max30003_handler(uint8_t *serial_array_data);
static void _ble_handler(uint8_t *serial_array_data);

#endif /*__SERIAL_SLAVE_H__*/

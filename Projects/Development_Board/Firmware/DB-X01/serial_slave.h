#ifndef __SERIAL_SLAVE_H__
#define __SERIAL_SLAVE_H__

#include "common.h"
#include "clocks.h"
#include "power.h"  
#include "bluetooth.h"

#if FT201X
#include "ft201x.h"
#endif

#if TMP117
#include "tmp117.h"
#endif

#if BMI160                   
#include "bmi160.h"
#endif

#if MAX30003
#include "max30003.h"
#endif

#if CY15B108QI
#include "cy15b108qi.h"
#endif

#if ECG
#include "ecg.h"
#endif

#if FDC1004
#include "fdc1004.h"
#endif

enum MODULE_COMMAND_CONSTANTS
{
    NRF52_MODULE = 0X01,

    #if TMP117
    TMP117_MODULE = 0X02,
    #endif

    #if BMI160
    BMI160_MODULE = 0X03,
    #endif

    #if MAX30003
    MAX30003_MODULE = 0X04,
    #endif

    #if FT201X
    FT201X_MODULE = 0X05,
    #endif
    
    BLUETOOTH_MODULE = 0x06, 
    
    #if ECG
    ECG_MODULE = 0x07,
    #endif

    #if CY15B108QI
    CY15B108QI_MODULE = 0X08,
    #endif

    SERIAL_SLAVE_MODULE = 0X09,

    #if FDC1004
    FDC1004_MODULE = 0X10,
    #endif
};

enum SERIAL_SLAVE_COMMAND_CONSTANTS
{
    #if FT201X
    USB_COMMAND_HEADER = 0XAA,
    USB_COMMAND_FOOTER = 0XAB,
    USB_LOG_HEADER = 0XAC,
    USB_LOG_FOOTER = 0XAD,
    ENABLE_USB_HANDLER_COMMAND = 0X07,
    DISABLE_USB_HANDLER_COMMAND = 0X08,
    #endif

    BLUETOOTH_COMMAND_HEADER = 0XBA,
    BLUETOOTH_COMMAND_FOOTER = 0XBB,
    BLUETOOTH_LOG_HEADER = 0XBC,
    BLUETOOTH_LOG_FOOTER = 0XBD,
    NRF52_INITIALIZATION_COMMAND = 0X01,

    #if TMP117
    TMP117_INITIALIZATION_COMMAND = 0X02,
    #endif

    #if CY15B108QI
    CY15B108QI_INITIALIZATION_COMMAND = 0X03,
    #endif

    #if MAX30003
    MAX30003_INITIALIZATION_COMMAND = 0X04,
    #endif

    STARTUP_INITIALIZATION_COMMAND = 0X05,
    ENABLE_BLUETOOTH_HANDLER_COMMAND = 0X06,

    #if FDC1004
    FDC1004_INITIALIZATION_COMMAND = 0X07,
    #endif
};

enum NRF52_COMMAND_CONSTANTS
{
    NRF52_HF_CLOCK_COMMAND = 0x01,
    NRF52_LF_CLOCK_COMMAND = 0x02,
    NRF52_CLOCK_COMMAND = 0X03,
    NRF52_RTC_CLOCK_COMMAND = 0X04,
    NRF52_POWER_COMMAND = 0X05,
    NRF52_COMMON_COMMAND = 0X06,
    
    #if I2C
    NRF52_I2C_COMMAND = 0X07,
    #endif

    #if SPI
    NRF52_SPI_COMMAND = 0X08
    #endif
};

#if FT201X
enum FT201X_COMMAND_CONSTANTS
{
    FT201X_READ_CHIP_ID_COMMAND = 0X01,
    FT201X_SET_VCP_COMMAND = 0X02,
    FT201X_WRITE_EEPROM_COMMAND = 0X03,
    FT201X_READ_EEPROM_COMMAND = 0X04,
    FT201X_WRITE_DATA_ARRAY_COMMAND = 0X05,
    FT201X_READ_DATA_COMMAND = 0X06
};
#endif

#if BMI160
enum BMI160_COMMAND_CONSTANTS
{
    BMI160_READ_CHIP_ID_COMMAND = 0X01,
    BMI160_INIT_COMMAND = 0X02,
    BMI160_READ_ACCEL_GYRO_COMMAND = 0X03
};
#endif

#if TMP117
enum TMP117_COMMAND_CONSTANTS
{
    TMP117_READ_CHIP_ID_COMMAND = 0X01,
    TMP117_INIT_COMMAND = 0X02,
    TMP117_SET_OPERATING_MODE_COMMAND = 0X03,
    TMP117_TEMP_UINT16_COMMAND = 0X04,
    TMP117_TEMP_CHAR_ARRAY_COMMAND = 0X05,
    TMP117_READ_REVISION_NUMBER_COMMAND = 0X06,
    TMP117_UNLOCK_EEPROM_COMMAND = 0X07,
    TMP117_GENERAL_CALL_RESET_COMMAND = 0X08
};
#endif

#if MAX30003
enum MAX30003_COMMAND_CONSTANTS
{
    MAX30003_READ_INFO_REGISTER_COMMAND = 0X01,
    MAX30003_READ_GENERAL_CONFIGURATION_COMMAND = 0X02,
    MAX30003_WRITE_GENERAL_CONFIGURATION_COMMAND = 0X03,
    MAX30003_READ_CALIBRATION_CONFIGURATION_COMMAND = 0X04,
    MAX30003_WRITE_CALIBRATION_CONFIGURATION_COMMAND = 0X05,
    MAX30003_READ_INPUT_MULTIPLEXER_CONFIGURATION_COMMAND = 0X06,
    MAX30003_WRITE_INPUT_MULTIPLEXER_CONFIGURATION_COMMAND = 0X07,
    MAX30003_READ_ECG_CONFIGURATION_COMMAND = 0X08,
    MAX30003_WRITE_ECG_CONFIGURATION_COMMAND = 0X09,
    MAX30003_READ_RTOR1_CONFIGURATION_COMMAND = 0X0A,
    MAX30003_WRITE_RTOR1_CONFIGURATION_COMMAND = 0X0B,
    MAX30003_READ_RTOR2_CONFIGURATION_COMMAND = 0X0C,
    MAX30003_WRITE_RTOR2_CONFIGURATION_COMMAND = 0X0D,
    MAX30003_READ_ECG_FIFO_MEMORY_COMMAND = 0X0E,
    MAX30003_SOFT_RESET_COMMAND = 0X0F,
    MAX30003_SYNC_COMMAND = 0X10,
    MAX30003_INIT_INTERRUPT_COMMAND = 0X11,
    MAX30003_ENABLE_PIN_INTERRUPT_COMMAND = 0X12,
    MAX30003_DISABLE_PIN_INTERRUPT_COMMAND = 0X13,
    MAX30003_GET_ECG_VOLTAGE_COMMAND = 0X14, 
    MAX30003_READ_STATUS_REGISTER_COMMAND = 0X15, 
    MAX30003_READ_INTERRUPT1_REGISTER_COMMAND = 0X16,
    MAX30003_WRITE_INTERRUPT1_REGISTER_COMMAND = 0X17,
    MAX30003_READ_INTERRUPT2_REGISTER_COMMAND = 0X18,
    MAX30003_WRITE_INTERRUPT2_REGISTER_COMMAND = 0X19, 
    MAX30003_READ_INTERRUPT_MANAGER_REGISTER_COMMAND = 0X1A,
    MAX30003_WRITE_INTERRUPT_MANAGER_REGISTER_COMMAND = 0X1B, 
    MAX30003_INIT_COMMAND = 0X1C, 
    MAX30003_INTERRUPT1_DISABLE_COMMAND = 0X1D,
    MAX30003_START_RECORDING_COMMAND = 0X1E,
    MAX30003_WRITE_FIFO_RESET_REGISTER_COMMAND = 0X1F,
};
#endif

enum NRF52_BLUETOOTH_COMMAND_CONSTANTS
{
    BLUETOOTH_INIT_GAP_PARAMS_COMMAND = 0X01,
    BLUETOOTH_INIT_GATT_COMMAND = 0X02,
    BLUETOOTH_INIT_SERVICES_COMMAND = 0X03,
    BLUETOOTH_INIT_CONN_PARAMS_COMMAND = 0X04,
    BLUETOOTH_INIT_BLE_STACK_COMMAND = 0X05,
    BLUETOOTH_INIT_PEER_MANAGER_COMMAND = 0X06,
    BLUETOOTH_INIT_ADVERTISING_COMMAND = 0X07,
    BLUETOOTH_SET_ADVERTISING_POWER_COMMAND = 0X09,
    BLUETOOTH_START_ADVERTISING_COMMAND = 0X0A,
    BLUETOOTH_WRITE_RESPONSE_CHAR_COMMAND = 0X0B,
    BLUETOOTH_WRITE_CRC_CHAR_COMMAND = 0X0C,
    BLUETOOTH_TRANSMIT_FIRMWARE_VERSION_COMMAND = 0X10,
    BLUETOOTH_TRANSMIT_HARDWARE_BOARD_VERSION_COMMAND = 0X11,

    #if TMP117
    BLUETOOTH_WRITE_TEMP_CHAR_COMMAND = 0X0D,
    BLUETOOTH_TRANSMIT_TEMPERATURE_RECORDING_SESSION_COMMAND = 0X0F,
    #endif

    #if ECG
    BLUETOOTH_WRITE_ECG_CHAR_COMMAND = 0X0E,
    BLUETOOTH_TRANSMIT_ECG_RECORDING_SESSION_COMMAND = 0X08,
    #endif

    BLUETOOTH_DISCONNECT_COMMAND = 0X12,
};

enum NRF52_CLOCK_COMMAND_CONSTANTS
{
    NRF52_HF_CLOCK_START = 0X01,
    NRF52_HF_CLOCK_STOP = 0X02,
    NRF52_NRFX_CLOCK_DRIVER_INIT = 0X03,
    NRF52_NRFX_CLOCK_DRIVER_UNINIT = 0X04,
    NRF52_LF_CLOCK_START = 0X05,
    NRF52_LF_CLOCK_STOP = 0X06
};

#if FT201X
enum NRF52_RTC_FT201X_COMMAND_CONSTANTS
{
    NRF52_RTC_FT201X_INIT = 0X01,
    NRF52_RTC_FT201X_SET_COUNTER = 0X02,
    NRF52_RTC_FT201X_START = 0X03,
    NRF52_RTC_FT201X_STOP = 0X04,
    NRF52_RTC_FT201X_RESTART = 0X05,
    NRF52_RTC_FT201X_UNINIT = 0X06,
};
#endif

#if TMP117
enum NRF52_RTC_TMP117_COMMAND_CONSTANTS
{
    NRF52_RTC_TMP117_INIT = 0X07,
    NRF52_RTC_TMP117_SET_COUNTER = 0X08,
    NRF52_RTC_TMP117_START = 0X09,
    NRF52_RTC_TMP117_STOP = 0X10,
    NRF52_RTC_TMP117_RESTART = 0X11,
    NRF52_RTC_TMP117_UNINIT = 0X12
};
#endif

enum NRF52_POWER_COMMAND_CONSTANTS
{
    NRF52_POWER_DCDC_CONVERTER_ENABLE = 0X01,
    NRF52_POWER_DCDC_CONVERTER_DISABLE = 0X02,
    NRF52_POWER_SLEEP_MODE_ENTER = 0X03,
    NRF52_POWER_DEEP_SLEEP_MODE_ENTER = 0X04,
    NRF52_POWER_MANAGER_HANDLER = 0X05,
    NRF52_POWER_MANAGER_INIT = 0X06
};

enum NRF52_LED_COMMAND_CONSTANTS
{
    NRF52_LED_INIT = 0X10,
    NRF52_LED_IND_LED_ON = 0X11,
    NRF52_LED_IND_LED_OFF = 0X12,
    NRF52_LED_IND_BLINK = 0X13,
    NRF52_LED_BLE_LED_ON = 0X14,
    NRF52_LED_BLE_LED_OFF = 0X15,
    NRF52_LED_BLE_BLINK = 0X16
};

enum NRF52_COMMON_COMMANDS_CONSTANTS
{
    NRF52_LOG_INIT = 0X01,
    NRF52_GPIOTE_INIT = 0X02,
    NRF52_LDO_INIT = 0X03,
    NRF52_VCC_LDO_EN = 0X04,
    NRF52_INPUT_OUTPUT_INIT = 0X05,

    #if MAX30003
    NRF52_MAX30003_POWER_LDO_EN = 0X06,
    #endif
};

#if I2C
enum NRF52_I2C_COMMANDS_CONSTANTS
{
    NRF52_I2C_TWIM_INIT = 0X01,
    NRF52_I2C_TWIM_UNINIT = 0X02,
    NRF52_I2C_TWIM_SETUP = 0X03,
    NRF52_I2C_TWIM_ENABLE = 0X04,
    NRF52_I2C_TWIM_DISABLE = 0x05,
};
#endif

#if SPI
enum NRF52_SPI_COMMANDS_CONSTANTS
{
    NRF52_SPI_SPIM_INIT = 0X01,
    NRF52_SPI_SPIM_ENABLE = 0X02,
    NRF52_SPI_SPIM_DISABLE = 0X03,
    NRF52_SPI_SPIM_UNINIT = 0X04,
    NRF52_SPI_SPIM_SELECT_CS_PIN = 0X05, 
    NRF52_SPI_SPIM_SETUP = 0X06, 
    NRF52_SPI_SPIM_INIT_CS_PIN = 0X07
};
#endif

enum NRF52_LED_COMMANDS_CONSTANTS
{
    NRF52_LED_IND_CUSTOM_BLINK = 0X01,
    NRF52_LED_IND_SHORT_BLINK = 0X02,
    NRF52_LED_IND_MEDIUM_BLINK = 0X03,
    NRF52_LED_IND_LONG_BLINK = 0X04
};

#if ECG
enum ECG_COMMANDS_CONSTANTS
{
    ECG_INIT = 0X01,
    ECG_START_RECORDING_SESSION = 0X02
};
#endif

#if CY15B108QI
enum CY15B108QI_COMMANDS_CONSTANTS
{
    CY15B108QI_INIT_COMMAND = 0X01,
    CY15B108QI_UNINIT_COMMAND = 0X02,
    CY15B108QI_ENTER_DEEP_POWER_DOWN_MODE_COMMAND = 0X03,
    CY15B108QI_EXIT_DEEP_POWER_DOWN_MODE_COMMAND = 0X04,
    CY15B108QI_ENTER_HIBERNATION_MODE_COMMAND = 0X05,
    CY15B108QI_EXIT_HIBERNATION_MODE_COMMAND = 0X06,
    CY15B108QI_SET_WRITE_ENABLE_LATCH_COMMAND = 0X07,
    CY15B108QI_RESET_WRITE_ENABLE_LATCH_COMMAND = 0X08,
    CY15B108QI_READ_DEVICE_ID_COMMAND = 0X09,
    CY15B108QI_READ_UNIQUE_ID_COMMAND = 0X0A,
    CY15B108QI_WRITE_STATUS_REGISTER_COMMAND = 0X0B,
    CY15B108QI_READ_STATUS_REGISTER_COMMAND = 0X0C,
};
#endif

#if FDC1004
enum FDC1004_COMMANDS_CONSTANTS
{
    FDC1004_INIT_COMMAND = 0X01,
    FDC1004_SOFT_RESET_COMMAND = 0X02,
    FDC1004_SET_OFFSET_CALIBRATION_COMMAND = 0X03,
    FDC1004_SET_GAIN_CALIBRATION_COMMAND = 0X04,
    FDC1004_SET_MEASUREMENT_RATE_COMMAND = 0X05,
    FDC1004_SET_REPEAT_MEASUREMENT_COMMAND = 0X06,
    FDC1004_GET_MANUFACTURER_ID_COMMAND = 0X07,
    FDC1004_GET_DEVICE_ID_COMMAND = 0X08,
    FDC1004_SET_CAPDAC_COMMAND = 0X09,
    FDC1004_TRIGGER_MEASUREMENT_COMMAND = 0X0A,
    FDC1004_GET_MEASUREMENT_COMMAND = 0X0B,
    FDC1004_UNINIT_COMMAND = 0X0C,
};
#endif

enum NRF52_BLUETOOTH_RESPONSE_CHAR_CONSTANTS
{
    BLUETOOTH_RESPONSE_CHAR_MESSAGE_RECEIVED = 0X01,
    BLUETOOTH_RESPONSE_CHAR_HEADER_FOOTER_INCORRECT = 0X02,
    BLUETOOTH_RESPONSE_CHAR_RECORDING_SESSION_FINISHED = 0X03,
    BLUETOOTH_RESPONSE_CHAR_RECORDING_SESSION_STARTED = 0X06,

    #if ECG
    BLUETOOTH_RESPONSE_CHAR_ECG_DATA_READY_FOR_TRANSMISSION = 0X04,
    #endif

    #if TMP117
    BLUETOOTH_RESPONSE_CHAR_TEMP_DATA_READY_FOR_TRANSMISSION = 0X05,
    #endif
};

void startup_initialization(void);

#if FT201X
void enable_usb_handler(void);
static void _disable_usb_handler(void);
void usb_handler(void);
static void _ft201x_handler(uint8_t *serial_array_data);
#endif

void enable_bluetooth_handler(void);
void bluetooth_handler(uint8_t *settings_char_data_array);
static void _bluetooth_handler(uint8_t *serial_array_data);

void state_handler(uint8_t *serial_array_data);

static void _serial_slave_handler(uint8_t *serial_array_data);
static void _nrf52_handler(uint8_t *serial_array_data);

#if BMI160
static void _bmi160_handler(uint8_t *serial_array_data);
#endif

#if TMP117
static void _tmp117_handler(uint8_t *serial_array_data);
#endif

#if MAX30003
static void _max30003_handler(uint8_t *serial_array_data);
#endif

#if ECG
static void _ecg_handler(uint8_t *serial_array_data);
#endif

#if CY15B108QI
static void _cy15b108qi_handler(uint8_t *serial_array_data);
#endif

#if FDC1004
static void _fdc1004_handler(uint8_t *serial_array_data);
#endif

#endif /*__SERIAL_SLAVE_H__*/
